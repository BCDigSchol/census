<h2>Advanced Search</h2>
<p>Try the <%= link_to 'Keyword search', public_search_index_path(:type => "kw") %></p>

<!--pre><%= @all_search.to_json %></pre-->
<%= form_tag(public_search_index_path, method: :get, id: "search_form") do %>
  <div class="panel panel-default">
    <div class="panel-body">
      <div class="adv-search-fields row">
        <%= hidden_field_tag :type, @search_type %>

        <div class="row" id="new-form">
          <div class="col-lg-8 col-md-8 col-sm-8">
            <!-- first search field group -->
            <%= render partial: 'advanced_search_form_group', locals: {num: 1} %>

            <!-- second search field group -->
            <%= render partial: 'advanced_search_form_group', locals: {num: 2} %>
          </div>
          <div class="col-lg-4 col-md-4 col-sm-4">
            <div class="adv-search-row-buttons">
              <div class="col-lg-12 col-md-12 col-sm-12">
                <div class="input-group input-group-lg">
                  <%= submit_tag 'Search', name: nil, :class => 'btn btn-lg btn-success', :id => 'adv-search-submit' %>
                </div>
              </div>
            </div>
            <div class="adv-search-row-buttons">
              <div class="col-lg-12 col-md-12 col-sm-12">
                <div class="input-group input-group-lg">
                  <%= link_to 'Clear', public_search_index_path(type: @search_type), :class => 'btn btn-lg btn-success' %>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- third search field group -->
        <div class="row search-row" id="search-row-group-3" >
          <div class="col-lg-8 col-md-8 col-sm-8">
            <%= render partial: 'advanced_search_form_group', locals: {num: 3} %>
          </div>
          <div class="col-lg-4 col-md-4 col-sm-4 add-buttons">
            <div class="col-lg-12 col-md-12 col-sm-12">
              <a href="#" class="add" data-next="#search-row-group-4"><i class="fas fa-2x fa-fw fa-plus-circle"></i></a>
              <i class="fas fa-2x fa-fw fa-minus-circle disabled"></i>
            </div>
          </div>
        </div>

        <!-- fourth search field group -->
        <div class="row search-row" id="search-row-group-4" style="display:none;">
          <div class="col-lg-8 col-md-8 col-sm-8">
            <%= render partial: 'advanced_search_form_group', locals: {num: 4} %>
          </div>
          <div class="col-lg-4 col-md-4 col-sm-4 add-buttons">
            <div class="col-lg-12 col-md-12 col-sm-12">
              <a href="#" class="add" data-next="#search-row-group-5"><i class="fas fa-2x fa-fw fa-plus-circle"></i></a>
              <a href="#" class="remove" data-previous="#search-row-group-3"><i class="fas fa-2x fa-fw fa-minus-circle"></i></a>
            </div>
          </div>
        </div>

        <!-- fifth search field group -->
        <div class="row search-row" id="search-row-group-5" style="display:none;">
          <div class="col-lg-8 col-md-8 col-sm-8">
            <%= render partial: 'advanced_search_form_group', locals: {num: 5} %>
          </div>
          <div class="col-lg-4 col-md-4 col-sm-4 add-buttons">
            <div class="col-lg-12 col-md-12 col-sm-12">
              <a href="#" class="add" data-next="#search-row-group-6"><i class="fas fa-2x fa-fw fa-plus-circle"></i></a>
              <a href="#" class="remove" data-previous="#search-row-group-4"><i class="fas fa-2x fa-fw fa-minus-circle"></i></a>
            </div>
          </div>
        </div>

        <!-- sixth search field group -->
        <div class="row search-row" id="search-row-group-6" style="display:none;">
          <div class="col-lg-8 col-md-8 col-sm-8">
            <%= render partial: 'advanced_search_form_group', locals: {num: 6} %>
          </div>
          <div class="col-lg-4 col-md-4 col-sm-4 add-buttons">
            <div class="col-lg-12 col-md-12 col-sm-12">
              <i class="fas fa-2x fa-fw fa-plus-circle disabled"></i>
              <a href="#" class="remove" data-previous="#search-row-group-5"><i class="fas fa-2x fa-fw fa-minus-circle"></i></a>
            </div>
          </div>
        </div>
      </div>

    </div>
  </div>
<% end %>
<script>
    $(document).ready(function() {
        // list of fields that are drop down filters and not free text
        var FILTER_FIELDS = [
            "text_type",
            "material_type",
            "genre"
        ];

        // https://stackoverflow.com/a/21903119
        function getUrlParameter(sParam) {
            var sPageURL = decodeURIComponent(window.location.search.substring(1)),
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;

            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');

                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? true : sParameterName[1];
                }
            }
        }

        // pull out advanced search params from URL and fit them back into the search fields
        function load_field_vals(){
            // get the query param
            var bq = getUrlParameter("bq");

            if (bq === undefined){
                console.log("could not find bq param!");
                return;
            }

            console.log("bq: " + bq);

            // example bool query
            // (title::cats)--AND--(journal::dogs)

            var split_tokens = bq.split("--");

            console.log(split_tokens);

            // tokens should now be in the pattern:
            //  [0] (field_name::search_string)
            //  [1] BOOLEAN
            //  [2] (field_name::search_string)
            //  [3] BOOLEAN
            //  ...

            var row_num = 1;
            $.each(split_tokens, function(i,tok){
                console.log("looking at token: " + tok);
                // determine the field ids
                var my_search_row = $("#search-row-" + row_num);
                console.log("currently on row: " + row_num);

                // add a new search row if we need more than the default 3
                if (row_num >= 4){
                    var this_row = "#search-row-group-" + (row_num - 1);
                    var target_row = "#search-row-group-" + row_num;
                    add_search_row(this_row, target_row);
                }

                row_num = parseInt(i / 2) + 2;

                if (i % 2 === 0) { // get even tokens

                    // (field_name::search_string)

                    // skip if empty value
                    if (tok === ""){
                        console.log("token is empty, skipping to next token");
                        return true;
                    }

                    // clean and split our token
                    var clean_tok = tok.replace(/^\(/g, "").replace(/\)$/g, "").replace("+", " ");
                    var split_toks = clean_tok.split("::");

                    console.log("split tokens: ");
                    console.log(split_toks);

                    // check if we have two tokens
                    // need to be careful for search terms that contain a "::"
                    if (split_toks.length !== 2){
                        console.log("split token has an unexpected number of components! expecting 2, found " + split_toks.length);
                        return true;
                    }

                    var field_name = split_toks[0];
                    var search_string = split_toks[1].trim();

                    console.log("field_name: " + field_name);
                    console.log("search_string: " + search_string);

                    // check if this file_name is a filter
                    if ($.inArray(field_name, FILTER_FIELDS) >= 0) {
                        console.log("this field is a filter: " + field_name);
                        var my_field = $(".facets-container .filter-panel #" + field_name);
                        my_field.val(search_string).attr('selected','selected');
                    } else { // regular search field
                        // update the search field name drop down
                        var my_field_name_list = my_search_row.find(".field_name ul li a");
                        my_field_name_list.each(function () {
                            var $this_item = $(this);
                            var $this_data_name = $this_item.attr("data-name");
                            if ($this_data_name === field_name) {
                                $this_item.click();

                                // update the search field value
                                var my_field_val = my_search_row.find(".selected");
                                my_field_val.val(search_string);

                                return false;
                            }
                        });
                    }
                } else { // odd token
                    // BOOLEAN

                    console.log("bool: " + tok);

                    // update the boolean drop down
                    var my_field_bool_list = my_search_row.find(".boolean ul li a");
                    my_field_bool_list.each(function () {
                        $this_item = $(this);
                        $this_data_name = $this_item.attr("data-name");
                        if ($this_data_name === tok) {
                            $this_item.click();
                        }
                    });
                }
            });

        }

        // function that changes the text of the drop down buttons to match the selected field name
        function change_labels(elem){
            // change label on field drop down button to the name of the selected field
            elem.parents(".input-group-btn").find('.btn').html(elem.text() + ' <span class="caret"></span>');
            elem.parents(".input-group-btn").find('.btn').val(elem.data('value'));
            elem.parents("ul").find("li").each(function () {
                $(this).removeClass("selected");
            });
            elem.parents("li").addClass("selected");
        }

        // trigger on bool field drop down selection
        $(".boolean .dropdown-menu li a").click(function (e) {
            e.preventDefault();
            var $this = $(this);

            // change label on field drop down button to the name of the selected field
            change_labels($this);
        });

        // trigger on field name drop down selection
        $(".fields_dropdown .dropdown-menu li a").click(function (e) {
            e.preventDefault();
            var $this = $(this);

            // change label on field drop down button to the name of the selected field
            change_labels($this);

            // manage how controlled vocabulary fields toggle from input to select field
            var is_controlled_vocab = $this.hasClass("controlled");
            console.log("is controlled: " + is_controlled_vocab);
            var selected_data_name = $this.attr("data-name");
            var adv_search_row = $this.parents(".adv-search-row");
            var select_fields = adv_search_row.find(".select_field");

            if (selected_data_name && is_controlled_vocab) {
                var select_class = ".select_" + selected_data_name;
                if ($this.parents(".adv-search-row").find(select_class).length){
                    console.log("selected text_type: " + select_class);
                    adv_search_row.find("input").addClass("hidden").removeClass("selected");
                    adv_search_row.find(".select_field").addClass("hidden").removeClass("selected");
                    adv_search_row.find(select_class).addClass("selected").removeClass("hidden");
                }
            } else {
                adv_search_row.find("input").addClass("selected").removeClass("hidden");
                select_fields.addClass("hidden").removeClass("selected");
            }
        });

        // trigger on form submission
        $("#new-form #adv-search-submit").click(function(e){
            e.preventDefault();

            //
            // First, get every field value and append to query_str string
            //
            var query_str = "";
            $('.adv-search-row').each(function(){
               var $this = $(this);

                // get boolean value
                var boolean_val = "";
                var boolean = $this.find(".boolean ul li.selected a");
                if (boolean && boolean.length) {
                    boolean_val = boolean.attr("data-name");
                    //console.log("my_bool: " + boolean_val);
                }

                // get field name
                var field_name = "";
                var my_field_name = $this.find(".field_name ul li.selected a");
                if (my_field_name && my_field_name.length) {
                    field_name = my_field_name.attr("data-name");
                    //console.log("my_field_name: " + field_name);

                    if (field_name && field_name.length){
                        // get field value
                        var field_val = "";
                        var my_form_field;

                        // first, check if a drop down is selected
                        // else, check the input field
                        var my_form_field_selects = $this.find("select.selected");
                        if (my_form_field_selects && my_form_field_selects.length) {
                            my_form_field = my_form_field_selects;
                        } else {
                            my_form_field = $this.find("input");
                        }

                        if (my_form_field && my_form_field.length) {
                            field_val = my_form_field.val().trim();
                            //console.log("my_form_field: " + field_val);
                            if (field_val && field_val.length) {
                                // only add in the boolean string if we first have
                                // a field name and search term added
                                if (boolean_val && query_str.length) {
                                    query_str += "--" + boolean_val + "--";
                                }
                                query_str += "(" + field_name + "::" + field_val + ")"
                            }
                        }
                    }
                }
            });
            console.log("query_str: " + query_str);

            //
            // Second, check on filters that append to query_str.
            // We allow for empty search queries that have filters
            //
            $(".facets-container .filter-panel :input").each(function () {
                var $this = $(this);
                var field_val = $this.val();

                // if value is selected of changed then add to query_str
                if (field_val && field_val.length) {
                    var field_name = $this.attr("id");
                    console.log("found: " + field_name + ": " + field_val);

                    // If query_str has a value then append AND bool operator to string
                    if (query_str && query_str.length) {
                        query_str += "--AND--"
                    }
                    query_str += "(" + field_name + "::" + field_val + ")"
                }
                console.log("updated query_str: " + query_str);
            });

            //
            // Third, update the URL parameters
            //
            var query_url_param = "";
            if (query_str && query_str.length) {
                query_url_param = "?type=adv&bq=" + query_str;
            }

            //
            // Fourth, check on the date range slider filter
            //
            // check if this is a new search
            var new_search = $("#publication_dates_data").attr("data-new-search");

            // get the faceted years from attribute
            var date_range_earliest_from_facet = $("#publication_dates_data").attr("data-publication-date-earliest");
            var date_range_latest_from_facet = $("#publication_dates_data").attr("data-publication-date-latest");

            // only apply date range filter if this is a new search or
            // the faceted years from attribute contains a value, which means that the filter was already applied
            if (new_search === "true" || (date_range_latest_from_facet && date_range_earliest_from_facet)) {

                // get the value from the date range sliders
                var date_range_earliest = $("input#publication-date-earliest-value").val();
                var date_range_latest = $("input#publication-date-latest-value").val();

                if (date_range_earliest || date_range_latest) {
                    var publication_date_range_param = "";
                    var earliest_val = date_range_earliest || date_range_latest;
                    var latest_val = date_range_latest || date_range_earliest;

                    console.log("date range: " + earliest_val + " - " + latest_val);

                    // only add in the date range param if there is at least one search field filled out
                    if (query_url_param && query_url_param.length) {
                        publication_date_range_param = "&publication_date_range=" + earliest_val + "-" + latest_val;
                        query_url_param += publication_date_range_param;
                    }
                }
            }

            //
            // Last, load the page with the updated search params
            //
            if (query_url_param && query_url_param.length){
                window.location = query_url_param;
            }
        });

        // function to add a new search row
        function add_search_row(this_row, target_row){
            // show the next row of fields
            $(target_row).show();

            // hide this set of add/remove buttons
            $(this_row).find(".add-buttons").hide();
        }

        // function to remove a search row
        function remove_search_row(this_row, target_row){
            // clear out all field vals
            $(this_row).find("input").val("");
            $(this_row).find(".adv-search-row ul.dropdown-menu").each(function () {
                var $this_select = $(this).find("li:first a");
                console.log($this_select.text());
                $this_select.click();
            });
            $(this_row).find(".adv-search-row select").each(function () {
                $(this).get(0).selectedIndex = 0;
            });

            // hide this row of fields
            $(this_row).hide();

            // show the previous row of add/remove buttons
            $(target_row).find(".add-buttons").show();
        }

        // trigger when add/remove buttons are clicked
        $(".add-buttons a").click(function(e){
            e.preventDefault();

            var $this = $(this);
            var this_row_id = "#" + $this.parents(".search-row").attr("id");

            if ($this.hasClass("add")){
                var target = $this.attr("data-next");
                add_search_row(this_row_id, target);
            } else if ($this.hasClass("remove")) {
                var target = $this.attr("data-previous");
                remove_search_row(this_row_id, target);
            }
        });

        // add values to adv search form fields
        load_field_vals();
    });
</script>