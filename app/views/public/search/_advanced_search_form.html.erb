<h2>Advanced Search</h2>
<p>Try the <%= link_to 'Keyword search', public_search_index_path(:type => "kw") %></p>

<%= form_tag(public_search_index_path, method: :get, id: "search_form") do %>
  <div class="panel panel-default">
    <div class="panel-body">
      <div class="adv-search-fields row">
        <%= hidden_field_tag :type, @search_type %>

        <div id="new-form">
          <div class="col-lg-8 col-md-8 col-sm-8">
            <!-- first search field group -->
            <%= render partial: 'advanced_search_form_group', locals: {num: 1} %>

            <!-- second search field group -->
            <%= render partial: 'advanced_search_form_group', locals: {num: 2} %>

            <!-- third search field group -->
            <%= render partial: 'advanced_search_form_group', locals: {num: 3} %>
          </div>
          <div class="col-lg-4 col-md-4 col-sm-4">
            <div class="adv-search-row-buttons">
              <div class="col-lg-12 col-md-12 col-sm-12">
                <div class="input-group input-group-lg">
                  <%= submit_tag 'Search', name: nil, :class => 'btn btn-lg btn-primary', :id => 'adv-search-submit' %>
                </div>
              </div>
            </div>
            <div class="adv-search-row-buttons">
              <div class="col-lg-12 col-md-12 col-sm-12">
                <div class="input-group input-group-lg">
                  <%= link_to 'Start over', public_search_index_path(type: @search_type), :class => 'btn btn-lg btn-default' %>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

    </div>
  </div>
<% end %>

<script>
    $(document).ready(function() {

        // https://stackoverflow.com/a/21903119
        function getUrlParameter(sParam) {
            var sPageURL = decodeURIComponent(window.location.search.substring(1)),
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;

            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');

                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? true : sParameterName[1];
                }
            }
        }

        function load_field_vals(){
            // get the query param
            var bq = getUrlParameter("bq");

            if (bq === undefined){
                console.log("could not find bq param!");
                return;
            }

            console.log("bq: " + bq);

            // example bool query
            // (title::cats)--AND--(journal::dogs)

            var split_tokens = bq.split("--");

            console.log(split_tokens);

            // tokens should now be in the pattern:
            //  [0] (field_name::search_string)
            //  [1] BOOLEAN
            //  [2] (field_name::search_string)
            //  [3] BOOLEAN
            //  ...

            var row_num = 1;
            $.each(split_tokens, function(i,tok){
                console.log("looking at token: " + tok);
                // determine the field ids
                var my_search_row = $("#search-row-" + row_num);
                console.log("currently on row: " + row_num);

                row_num = parseInt(i / 2) + 2;

                if (i % 2 === 0) { // get even tokens
                    // (field_name::search_string)

                    // skip if empty value
                    if (tok === ""){
                        console.log("token is empty, skipping to next token");
                        return true;
                    }

                    // clean and split our token
                    var clean_tok = tok.replace(/^\(/g, "").replace(/\)$/g, "").replace("+", " ");
                    var split_toks = clean_tok.split("::");

                    console.log("split tokens: ");
                    console.log(split_toks);

                    // check if we have two tokens
                    // need to be careful for search terms that contain a "::"
                    if (split_toks.length !== 2){
                        console.log("split token has an unexpected number of components! expecting 2, found " + split_toks.length);
                        return true;
                    }

                    var field_name = split_toks[0];
                    var search_string = split_toks[1].trim();

                    console.log("field_name: " + field_name);
                    console.log("search_string: " + search_string);

                    // update the search field name drop down
                    var my_field_name_list = my_search_row.find(".field_name ul li a");
                    my_field_name_list.each(function(){
                        $this_item = $(this);
                        $this_data_name = $this_item.attr("data-name");
                        if ($this_data_name === field_name) {
                            $this_item.click();

                            // update the search field value
                            var my_field_val = my_search_row.find(".selected");
                            my_field_val.val(search_string);

                            return false;
                        }
                    });

                } else { // odd token
                    // BOOLEAN

                    console.log("bool: " + tok);

                    // update the boolean drop down
                    var my_field_bool_list = my_search_row.find(".boolean ul li a");
                    my_field_bool_list.each(function () {
                        $this_item = $(this);
                        $this_data_name = $this_item.attr("data-name");
                        if ($this_data_name === tok) {
                            $this_item.click();
                        }
                    });
                }
            });

        }

        $(".dropdown-menu li a").click(function (e) {
            e.preventDefault();
            var $this = $(this);

            // change label on field drop down button to the name of the selected field
            $this.parents(".input-group-btn").find('.btn').html($(this).text() + ' <span class="caret"></span>');
            $this.parents(".input-group-btn").find('.btn').val($(this).data('value'));
            $this.parents("ul").find("li").each(function(){
                $(this).removeClass("selected");
            });
            $this.parents("li").addClass("selected");

            // manage how controlled vocabulary fields toggle from input to select field
            var is_controlled_vocab = $this.hasClass("controlled");
            console.log("is controlled: " + is_controlled_vocab);
            var selected_data_name = $this.attr("data-name");
            var adv_search_row = $this.parents(".adv-search-row");
            var select_fields = adv_search_row.find(".select_field");

            if (selected_data_name && is_controlled_vocab) {
                var select_class = ".select_" + selected_data_name;
                if ($this.parents(".adv-search-row").find(select_class).length){
                    console.log("selected text_type: " + select_class);
                    adv_search_row.find("input").addClass("hidden").removeClass("selected");
                    adv_search_row.find(".select_field").addClass("hidden").removeClass("selected");
                    adv_search_row.find(select_class).addClass("selected").removeClass("hidden");
                }
            } else {
                adv_search_row.find("input").addClass("selected").removeClass("hidden");
                select_fields.addClass("hidden").removeClass("selected");
            }
        });

        $("#new-form #adv-search-submit").click(function(e){
            e.preventDefault();

            var query_str = "";
            // get every field value
            $('.adv-search-row').each(function(){
               var $this = $(this);

                //get boolean value//
                var boolean_val = "";
                var boolean = $this.find(".boolean ul li.selected a");
                if (boolean && boolean.length) {
                    boolean_val = boolean.attr("data-name");
                    //console.log("my_bool: " + boolean_val);
                }

                // get field name
                var field_name = "";
                var my_field_name = $this.find(".field_name ul li.selected a");
                if (my_field_name && my_field_name.length) {
                    field_name = my_field_name.attr("data-name");
                    //console.log("my_field_name: " + field_name);

                    if (field_name && field_name.length){
                        // get field value
                        var field_val = "";
                        var my_form_field;

                        // first, check if a drop down is selected
                        // else, check the input field
                        var my_form_field_selects = $this.find("select.selected");
                        if (my_form_field_selects && my_form_field_selects.length) {
                            my_form_field = my_form_field_selects;
                        } else {
                            my_form_field = $this.find("input");
                        }

                        if (my_form_field && my_form_field.length) {
                            field_val = my_form_field.val().trim();
                            //console.log("my_form_field: " + field_val);
                            if (field_val && field_val.length) {
                                // only add in the boolean string if we first have
                                // a field name and search term added
                                if (boolean_val && query_str.length) {
                                    query_str += "--" + boolean_val + "--";
                                }
                                query_str += "(" + field_name + "::" + field_val + ")"
                            }
                        }
                    }
                }
            });

            console.log("query_str: " + query_str);

            if (query_str && query_str.length){
                var query_url = "?type=adv&bq=" + query_str;
                window.location = query_url;
            }
        });

        // add values to adv search form fields
        load_field_vals();
    });
</script>